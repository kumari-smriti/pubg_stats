{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "c068a1d0",
   "metadata": {},
   "source": [
    "# Analyzing PUBG Data with Python"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b3ba75c",
   "metadata": {},
   "source": [
    "PlayerUnknown's Battlegrounds (PUBG) has taken the gaming world by storm, offering an immersive battle royale experience. Beyond its gaming aspect, PUBG also provides a wealth of data that can be mined and analyzed to gain insights into player behavior, strategies, and performance.\n",
    "\n",
    "In this Jupyter Notebook project, we will delve into the exciting world of PUBG data analysis using Python. We will be working with a dataset containing a treasure trove of information, including player statistics, match details, and in-game events. Our goal is to harness the power of Python libraries such as Pandas, NumPy, and Matplotlib to extract meaningful insights from this dataset."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ff2a48f",
   "metadata": {},
   "source": [
    "# Import Library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df179ad8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "517a0fd1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import plotly.express as px"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b0eb245",
   "metadata": {},
   "source": [
    "# Uploading Csv fle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ddda5ead",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv(r\"C:\\Users\\Syed Arif\\Desktop\\Pubg_Stats.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c5597201",
   "metadata": {},
   "source": [
    "# Data Preprocessing\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aace63f6",
   "metadata": {},
   "source": [
    "# .head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b7a66965",
   "metadata": {},
   "source": [
    "head is used show to the By default = 5 rows in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "1c714689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Player_Name</th>\n",
       "      <th>Matches_Played</th>\n",
       "      <th>Kills</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Damage_Dealt</th>\n",
       "      <th>Headshots</th>\n",
       "      <th>Wins</th>\n",
       "      <th>Top_10s</th>\n",
       "      <th>Revives</th>\n",
       "      <th>Distance_Traveled</th>\n",
       "      <th>Weapons_Used</th>\n",
       "      <th>Time_Survived</th>\n",
       "      <th>Rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>StealthMaster</td>\n",
       "      <td>250</td>\n",
       "      <td>587</td>\n",
       "      <td>143</td>\n",
       "      <td>98</td>\n",
       "      <td>15243</td>\n",
       "      <td>234</td>\n",
       "      <td>32</td>\n",
       "      <td>145</td>\n",
       "      <td>67</td>\n",
       "      <td>72560</td>\n",
       "      <td>12</td>\n",
       "      <td>28976</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>SniperLion</td>\n",
       "      <td>312</td>\n",
       "      <td>823</td>\n",
       "      <td>218</td>\n",
       "      <td>112</td>\n",
       "      <td>18975</td>\n",
       "      <td>312</td>\n",
       "      <td>42</td>\n",
       "      <td>189</td>\n",
       "      <td>95</td>\n",
       "      <td>89042</td>\n",
       "      <td>15</td>\n",
       "      <td>33652</td>\n",
       "      <td>Diamond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>NinjaGamer</td>\n",
       "      <td>186</td>\n",
       "      <td>492</td>\n",
       "      <td>84</td>\n",
       "      <td>56</td>\n",
       "      <td>11786</td>\n",
       "      <td>156</td>\n",
       "      <td>28</td>\n",
       "      <td>97</td>\n",
       "      <td>48</td>\n",
       "      <td>60924</td>\n",
       "      <td>10</td>\n",
       "      <td>21764</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>ThunderStrike</td>\n",
       "      <td>409</td>\n",
       "      <td>923</td>\n",
       "      <td>267</td>\n",
       "      <td>134</td>\n",
       "      <td>21037</td>\n",
       "      <td>288</td>\n",
       "      <td>55</td>\n",
       "      <td>258</td>\n",
       "      <td>128</td>\n",
       "      <td>98234</td>\n",
       "      <td>18</td>\n",
       "      <td>40128</td>\n",
       "      <td>Silver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>SpeedDemon</td>\n",
       "      <td>143</td>\n",
       "      <td>368</td>\n",
       "      <td>68</td>\n",
       "      <td>42</td>\n",
       "      <td>9865</td>\n",
       "      <td>123</td>\n",
       "      <td>20</td>\n",
       "      <td>72</td>\n",
       "      <td>36</td>\n",
       "      <td>52072</td>\n",
       "      <td>8</td>\n",
       "      <td>16834</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0    Player_Name  Matches_Played  Kills  Deaths  Assists  \\\n",
       "0           0  StealthMaster             250    587     143       98   \n",
       "1           1     SniperLion             312    823     218      112   \n",
       "2           2     NinjaGamer             186    492      84       56   \n",
       "3           3  ThunderStrike             409    923     267      134   \n",
       "4           4     SpeedDemon             143    368      68       42   \n",
       "\n",
       "   Damage_Dealt  Headshots  Wins  Top_10s  Revives  Distance_Traveled  \\\n",
       "0         15243        234    32      145       67              72560   \n",
       "1         18975        312    42      189       95              89042   \n",
       "2         11786        156    28       97       48              60924   \n",
       "3         21037        288    55      258      128              98234   \n",
       "4          9865        123    20       72       36              52072   \n",
       "\n",
       "   Weapons_Used  Time_Survived      Rank  \n",
       "0            12          28976      Gold  \n",
       "1            15          33652   Diamond  \n",
       "2            10          21764  Platinum  \n",
       "3            18          40128    Silver  \n",
       "4             8          16834      Gold  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8684a0d2",
   "metadata": {},
   "source": [
    "# .tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc1a3074",
   "metadata": {},
   "source": [
    "tail is used to show rows by Descending order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "13069e51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Player_Name</th>\n",
       "      <th>Matches_Played</th>\n",
       "      <th>Kills</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Damage_Dealt</th>\n",
       "      <th>Headshots</th>\n",
       "      <th>Wins</th>\n",
       "      <th>Top_10s</th>\n",
       "      <th>Revives</th>\n",
       "      <th>Distance_Traveled</th>\n",
       "      <th>Weapons_Used</th>\n",
       "      <th>Time_Survived</th>\n",
       "      <th>Rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>216</td>\n",
       "      <td>CrimsonRider</td>\n",
       "      <td>294</td>\n",
       "      <td>743</td>\n",
       "      <td>187</td>\n",
       "      <td>132</td>\n",
       "      <td>17567</td>\n",
       "      <td>242</td>\n",
       "      <td>39</td>\n",
       "      <td>133</td>\n",
       "      <td>67</td>\n",
       "      <td>66987</td>\n",
       "      <td>13</td>\n",
       "      <td>28345</td>\n",
       "      <td>Diamond</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>217</td>\n",
       "      <td>BlazingSorcerer</td>\n",
       "      <td>203</td>\n",
       "      <td>521</td>\n",
       "      <td>109</td>\n",
       "      <td>72</td>\n",
       "      <td>13123</td>\n",
       "      <td>193</td>\n",
       "      <td>27</td>\n",
       "      <td>91</td>\n",
       "      <td>45</td>\n",
       "      <td>55487</td>\n",
       "      <td>10</td>\n",
       "      <td>23267</td>\n",
       "      <td>Gold</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>218</td>\n",
       "      <td>FrozenFlare</td>\n",
       "      <td>206</td>\n",
       "      <td>553</td>\n",
       "      <td>117</td>\n",
       "      <td>76</td>\n",
       "      <td>13756</td>\n",
       "      <td>196</td>\n",
       "      <td>29</td>\n",
       "      <td>96</td>\n",
       "      <td>49</td>\n",
       "      <td>58789</td>\n",
       "      <td>10</td>\n",
       "      <td>24579</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>219</td>\n",
       "      <td>AbyssGuardian</td>\n",
       "      <td>220</td>\n",
       "      <td>597</td>\n",
       "      <td>144</td>\n",
       "      <td>98</td>\n",
       "      <td>14967</td>\n",
       "      <td>212</td>\n",
       "      <td>32</td>\n",
       "      <td>108</td>\n",
       "      <td>54</td>\n",
       "      <td>60978</td>\n",
       "      <td>11</td>\n",
       "      <td>25679</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>220</td>\n",
       "      <td>SpectralPhantom</td>\n",
       "      <td>225</td>\n",
       "      <td>624</td>\n",
       "      <td>149</td>\n",
       "      <td>100</td>\n",
       "      <td>15345</td>\n",
       "      <td>219</td>\n",
       "      <td>33</td>\n",
       "      <td>110</td>\n",
       "      <td>55</td>\n",
       "      <td>61789</td>\n",
       "      <td>11</td>\n",
       "      <td>25967</td>\n",
       "      <td>Platinum</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0      Player_Name  Matches_Played  Kills  Deaths  Assists  \\\n",
       "216         216     CrimsonRider             294    743     187      132   \n",
       "217         217  BlazingSorcerer             203    521     109       72   \n",
       "218         218      FrozenFlare             206    553     117       76   \n",
       "219         219    AbyssGuardian             220    597     144       98   \n",
       "220         220  SpectralPhantom             225    624     149      100   \n",
       "\n",
       "     Damage_Dealt  Headshots  Wins  Top_10s  Revives  Distance_Traveled  \\\n",
       "216         17567        242    39      133       67              66987   \n",
       "217         13123        193    27       91       45              55487   \n",
       "218         13756        196    29       96       49              58789   \n",
       "219         14967        212    32      108       54              60978   \n",
       "220         15345        219    33      110       55              61789   \n",
       "\n",
       "     Weapons_Used  Time_Survived      Rank  \n",
       "216            13          28345   Diamond  \n",
       "217            10          23267      Gold  \n",
       "218            10          24579  Platinum  \n",
       "219            11          25679  Platinum  \n",
       "220            11          25967  Platinum  "
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e76fc80f",
   "metadata": {},
   "source": [
    "# .shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21d6d5af",
   "metadata": {},
   "source": [
    "It show the total no of rows & Column in the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "e34d1ec4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(221, 15)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "618b8c56",
   "metadata": {},
   "source": [
    "# .Columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81d5b891",
   "metadata": {},
   "source": [
    "It show the no of each Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d90a23ca",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Unnamed: 0', 'Player_Name', 'Matches_Played', 'Kills', 'Deaths',\n",
       "       'Assists', 'Damage_Dealt', 'Headshots', 'Wins', 'Top_10s', 'Revives',\n",
       "       'Distance_Traveled', 'Weapons_Used', 'Time_Survived', 'Rank'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c3f8320",
   "metadata": {},
   "source": [
    "# .dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "19881edc",
   "metadata": {},
   "source": [
    "This Attribute show the data type of each column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "4a5c7bdd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0            int64\n",
       "Player_Name          object\n",
       "Matches_Played        int64\n",
       "Kills                 int64\n",
       "Deaths                int64\n",
       "Assists               int64\n",
       "Damage_Dealt          int64\n",
       "Headshots             int64\n",
       "Wins                  int64\n",
       "Top_10s               int64\n",
       "Revives               int64\n",
       "Distance_Traveled     int64\n",
       "Weapons_Used          int64\n",
       "Time_Survived         int64\n",
       "Rank                 object\n",
       "dtype: object"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f641048a",
   "metadata": {},
   "source": [
    "# .unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bf6d4f5e",
   "metadata": {},
   "source": [
    "In a column, It show the unique value of specific column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bb0f0dd0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['StealthMaster', 'SniperLion', 'NinjaGamer', 'ThunderStrike',\n",
       "       'SpeedDemon', 'BlazeFury', 'RapidShadow', 'Frostbite',\n",
       "       'SavageQueen', 'SwiftStriker', 'VenomousViper', 'PhoenixFury',\n",
       "       'SteelStorm', 'BlazingBlade', 'StormChaser', 'Nightmare',\n",
       "       'CrimsonTide', 'SilentShadow', 'VengefulViper', 'SolarFlare',\n",
       "       'SkyDancer', 'RogueWraith', 'LethalLynx', 'FrostFang',\n",
       "       'ScarletStrider', 'RagingRaptor', 'ShadowWisp', 'VenomStrike',\n",
       "       'FireFury', 'BlazingSun', 'ShadowStrike', 'SteelGuardian',\n",
       "       'WickedWitch', 'RuthlessRaptor', 'FrostyFox', 'ViperVenom',\n",
       "       'CrimsonReaper', 'PhantomGhost', 'StormStrider', 'StormBreaker',\n",
       "       'SapphireSword', 'ShadowReign', 'DragonSlayer', 'SilverShadow',\n",
       "       'EagleEye', 'BlazingStorm', 'MidnightSage', 'RapidBlaze',\n",
       "       'FrostFire', 'ScarletWitch', 'RagingTiger', 'SpectralRogue',\n",
       "       'BlazingRaptor', 'EternalShadow', 'WickedStrider', 'CrimsonStorm',\n",
       "       'RuthlessReaper', 'FrostFury', 'ShadowBlade', 'RapidPhantom',\n",
       "       'ViperStrike', 'EternalBlaze', 'Vengeance', 'LunarShadow',\n",
       "       'Deathstrike', 'AzureBlade', 'RavenHeart', 'SerpentFury',\n",
       "       'CrimsonRogue', 'VoidSeeker', 'AstralSword', 'FrozenFlame',\n",
       "       'TwilightWarden', 'ShadowPhoenix', 'PhantomStrider', 'EternalFire',\n",
       "       'NebulaBlade', 'SilverHawk', 'SolarSword', 'EclipseShadow',\n",
       "       'StarBlade', 'LethalWraith', 'RadiantBlaze', 'FrostGuardian',\n",
       "       'MysticSerpent', 'InfernoStorm', 'BlazeRanger', 'RagingFire',\n",
       "       'ShadowDancer', 'PhoenixWings', 'IceStorm', 'MoonlitSorcerer',\n",
       "       'DarkReaper', 'CosmicGhost', 'StormRider', 'FlareRogue',\n",
       "       'RadiantBlade', 'TempestPhantom', 'SapphireViper', 'EternalFlame',\n",
       "       'StarlightBlade', 'CrimsonRider', 'BlazingSorcerer', 'FrozenFlare',\n",
       "       'AbyssGuardian', 'SpectralPhantom'], dtype=object)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Player_Name\"].unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f34840f6",
   "metadata": {},
   "source": [
    "# .nuique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73792a7b",
   "metadata": {},
   "source": [
    "It will show the total no of unque value from whole data frame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "2e192d57",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0           221\n",
       "Player_Name          106\n",
       "Matches_Played        70\n",
       "Kills                 90\n",
       "Deaths                82\n",
       "Assists               65\n",
       "Damage_Dealt         102\n",
       "Headshots             70\n",
       "Wins                  28\n",
       "Top_10s               59\n",
       "Revives               39\n",
       "Distance_Traveled    105\n",
       "Weapons_Used           9\n",
       "Time_Survived        107\n",
       "Rank                   4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d234903",
   "metadata": {},
   "source": [
    "# .describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dff6dbc9",
   "metadata": {},
   "source": [
    "It show the Count, mean , median etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "dba2fda3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Matches_Played</th>\n",
       "      <th>Kills</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Damage_Dealt</th>\n",
       "      <th>Headshots</th>\n",
       "      <th>Wins</th>\n",
       "      <th>Top_10s</th>\n",
       "      <th>Revives</th>\n",
       "      <th>Distance_Traveled</th>\n",
       "      <th>Weapons_Used</th>\n",
       "      <th>Time_Survived</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "      <td>221.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>110.000000</td>\n",
       "      <td>234.624434</td>\n",
       "      <td>612.674208</td>\n",
       "      <td>142.579186</td>\n",
       "      <td>92.615385</td>\n",
       "      <td>14801.004525</td>\n",
       "      <td>207.361991</td>\n",
       "      <td>31.895928</td>\n",
       "      <td>110.357466</td>\n",
       "      <td>54.330317</td>\n",
       "      <td>61449.316742</td>\n",
       "      <td>10.859729</td>\n",
       "      <td>25444.420814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>63.941379</td>\n",
       "      <td>37.178429</td>\n",
       "      <td>89.311216</td>\n",
       "      <td>32.882564</td>\n",
       "      <td>21.423045</td>\n",
       "      <td>1902.947975</td>\n",
       "      <td>29.775909</td>\n",
       "      <td>5.806190</td>\n",
       "      <td>23.794648</td>\n",
       "      <td>10.436145</td>\n",
       "      <td>5775.529199</td>\n",
       "      <td>1.318835</td>\n",
       "      <td>2699.278875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>143.000000</td>\n",
       "      <td>368.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>42.000000</td>\n",
       "      <td>9865.000000</td>\n",
       "      <td>123.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>67.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>49785.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>16834.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>55.000000</td>\n",
       "      <td>206.000000</td>\n",
       "      <td>543.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>13589.000000</td>\n",
       "      <td>193.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>97.000000</td>\n",
       "      <td>48.000000</td>\n",
       "      <td>57856.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>23879.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>110.000000</td>\n",
       "      <td>224.000000</td>\n",
       "      <td>604.000000</td>\n",
       "      <td>138.000000</td>\n",
       "      <td>92.000000</td>\n",
       "      <td>14894.000000</td>\n",
       "      <td>210.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>108.000000</td>\n",
       "      <td>54.000000</td>\n",
       "      <td>60986.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>25467.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>165.000000</td>\n",
       "      <td>257.000000</td>\n",
       "      <td>674.000000</td>\n",
       "      <td>167.000000</td>\n",
       "      <td>111.000000</td>\n",
       "      <td>15987.000000</td>\n",
       "      <td>226.000000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>125.000000</td>\n",
       "      <td>60.000000</td>\n",
       "      <td>64279.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>26987.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>220.000000</td>\n",
       "      <td>409.000000</td>\n",
       "      <td>923.000000</td>\n",
       "      <td>267.000000</td>\n",
       "      <td>139.000000</td>\n",
       "      <td>21037.000000</td>\n",
       "      <td>312.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>258.000000</td>\n",
       "      <td>128.000000</td>\n",
       "      <td>98234.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>40128.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Unnamed: 0  Matches_Played       Kills      Deaths     Assists  \\\n",
       "count  221.000000      221.000000  221.000000  221.000000  221.000000   \n",
       "mean   110.000000      234.624434  612.674208  142.579186   92.615385   \n",
       "std     63.941379       37.178429   89.311216   32.882564   21.423045   \n",
       "min      0.000000      143.000000  368.000000   68.000000   42.000000   \n",
       "25%     55.000000      206.000000  543.000000  117.000000   76.000000   \n",
       "50%    110.000000      224.000000  604.000000  138.000000   92.000000   \n",
       "75%    165.000000      257.000000  674.000000  167.000000  111.000000   \n",
       "max    220.000000      409.000000  923.000000  267.000000  139.000000   \n",
       "\n",
       "       Damage_Dealt   Headshots        Wins     Top_10s     Revives  \\\n",
       "count    221.000000  221.000000  221.000000  221.000000  221.000000   \n",
       "mean   14801.004525  207.361991   31.895928  110.357466   54.330317   \n",
       "std     1902.947975   29.775909    5.806190   23.794648   10.436145   \n",
       "min     9865.000000  123.000000   18.000000   67.000000   32.000000   \n",
       "25%    13589.000000  193.000000   28.000000   97.000000   48.000000   \n",
       "50%    14894.000000  210.000000   32.000000  108.000000   54.000000   \n",
       "75%    15987.000000  226.000000   36.000000  125.000000   60.000000   \n",
       "max    21037.000000  312.000000   55.000000  258.000000  128.000000   \n",
       "\n",
       "       Distance_Traveled  Weapons_Used  Time_Survived  \n",
       "count         221.000000    221.000000     221.000000  \n",
       "mean        61449.316742     10.859729   25444.420814  \n",
       "std          5775.529199      1.318835    2699.278875  \n",
       "min         49785.000000      8.000000   16834.000000  \n",
       "25%         57856.000000     10.000000   23879.000000  \n",
       "50%         60986.000000     11.000000   25467.000000  \n",
       "75%         64279.000000     12.000000   26987.000000  \n",
       "max         98234.000000     18.000000   40128.000000  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e0a1161b",
   "metadata": {},
   "source": [
    "# .value_counts"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dcea0077",
   "metadata": {},
   "source": [
    "It Shows all the unique values with their count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "8a63f82e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "VengefulViper      7\n",
       "Frostbite          5\n",
       "VenomousViper      5\n",
       "LethalLynx         4\n",
       "Nightmare          4\n",
       "                  ..\n",
       "MidnightSage       1\n",
       "BlazingStorm       1\n",
       "EagleEye           1\n",
       "SilverShadow       1\n",
       "SpectralPhantom    1\n",
       "Name: Player_Name, Length: 106, dtype: int64"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[\"Player_Name\"].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f55f4c89",
   "metadata": {},
   "source": [
    "# .isnull()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb961a9d",
   "metadata": {},
   "source": [
    "It shows the how many null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "614ae149",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Player_Name</th>\n",
       "      <th>Matches_Played</th>\n",
       "      <th>Kills</th>\n",
       "      <th>Deaths</th>\n",
       "      <th>Assists</th>\n",
       "      <th>Damage_Dealt</th>\n",
       "      <th>Headshots</th>\n",
       "      <th>Wins</th>\n",
       "      <th>Top_10s</th>\n",
       "      <th>Revives</th>\n",
       "      <th>Distance_Traveled</th>\n",
       "      <th>Weapons_Used</th>\n",
       "      <th>Time_Survived</th>\n",
       "      <th>Rank</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>217</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>218</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>219</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>220</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>221 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0  Player_Name  Matches_Played  Kills  Deaths  Assists  \\\n",
       "0         False        False           False  False   False    False   \n",
       "1         False        False           False  False   False    False   \n",
       "2         False        False           False  False   False    False   \n",
       "3         False        False           False  False   False    False   \n",
       "4         False        False           False  False   False    False   \n",
       "..          ...          ...             ...    ...     ...      ...   \n",
       "216       False        False           False  False   False    False   \n",
       "217       False        False           False  False   False    False   \n",
       "218       False        False           False  False   False    False   \n",
       "219       False        False           False  False   False    False   \n",
       "220       False        False           False  False   False    False   \n",
       "\n",
       "     Damage_Dealt  Headshots   Wins  Top_10s  Revives  Distance_Traveled  \\\n",
       "0           False      False  False    False    False              False   \n",
       "1           False      False  False    False    False              False   \n",
       "2           False      False  False    False    False              False   \n",
       "3           False      False  False    False    False              False   \n",
       "4           False      False  False    False    False              False   \n",
       "..            ...        ...    ...      ...      ...                ...   \n",
       "216         False      False  False    False    False              False   \n",
       "217         False      False  False    False    False              False   \n",
       "218         False      False  False    False    False              False   \n",
       "219         False      False  False    False    False              False   \n",
       "220         False      False  False    False    False              False   \n",
       "\n",
       "     Weapons_Used  Time_Survived   Rank  \n",
       "0           False          False  False  \n",
       "1           False          False  False  \n",
       "2           False          False  False  \n",
       "3           False          False  False  \n",
       "4           False          False  False  \n",
       "..            ...            ...    ...  \n",
       "216         False          False  False  \n",
       "217         False          False  False  \n",
       "218         False          False  False  \n",
       "219         False          False  False  \n",
       "220         False          False  False  \n",
       "\n",
       "[221 rows x 15 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "0d20005b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(df.isnull())\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "862d0875",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0           0\n",
       "Player_Name          0\n",
       "Matches_Played       0\n",
       "Kills                0\n",
       "Deaths               0\n",
       "Assists              0\n",
       "Damage_Dealt         0\n",
       "Headshots            0\n",
       "Wins                 0\n",
       "Top_10s              0\n",
       "Revives              0\n",
       "Distance_Traveled    0\n",
       "Weapons_Used         0\n",
       "Time_Survived        0\n",
       "Rank                 0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0c50089e",
   "metadata": {},
   "source": [
    "# Drop the Unnamed Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "3b98261f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.drop(['Unnamed: 0'],axis=1,inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e983db0",
   "metadata": {},
   "source": [
    "# Show the Rank in Barplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3ee8e689",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.Rank.value_counts().plot(kind = \"bar\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd581cbd",
   "metadata": {},
   "source": [
    "# Top 10 players By Matches Played"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "b6220b58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "alignmentgroup": "True",
         "hovertemplate": "Player_Name=%{x}<br>Matches_Played=%{y}<extra></extra>",
         "legendgroup": "",
         "marker": {
          "color": "#636efa",
          "pattern": {
           "shape": ""
          }
         },
         "name": "",
         "offsetgroup": "",
         "orientation": "v",
         "showlegend": false,
         "textposition": "auto",
         "type": "bar",
         "x": [
          "StealthMaster",
          "SniperLion",
          "NinjaGamer",
          "ThunderStrike",
          "SpeedDemon",
          "BlazeFury",
          "RapidShadow",
          "Frostbite",
          "SavageQueen",
          "SwiftStriker",
          "VenomousViper",
          "PhoenixFury",
          "SteelStorm",
          "BlazingBlade",
          "StormChaser",
          "Frostbite",
          "Nightmare",
          "CrimsonTide",
          "SilentShadow",
          "VengefulViper",
          "SolarFlare",
          "SkyDancer",
          "RogueWraith",
          "LethalLynx",
          "FrostFang",
          "ScarletStrider",
          "RagingRaptor",
          "ShadowWisp",
          "VenomStrike",
          "FireFury",
          "VenomousViper",
          "PhoenixFury",
          "SteelStorm",
          "BlazingBlade",
          "StormChaser",
          "Frostbite",
          "Nightmare",
          "CrimsonTide",
          "SilentShadow",
          "VengefulViper",
          "SolarFlare",
          "SkyDancer",
          "RogueWraith",
          "LethalLynx",
          "FrostFang",
          "ScarletStrider",
          "RagingRaptor",
          "ShadowWisp",
          "VenomStrike",
          "FireFury",
          "VenomousViper",
          "PhoenixFury",
          "SteelStorm",
          "BlazingBlade",
          "StormChaser",
          "Frostbite",
          "Nightmare",
          "CrimsonTide",
          "SilentShadow",
          "VengefulViper",
          "SolarFlare",
          "SkyDancer",
          "RogueWraith",
          "LethalLynx",
          "FrostFang",
          "ScarletStrider",
          "RagingRaptor",
          "ShadowWisp",
          "VenomStrike",
          "FireFury",
          "VenomousViper",
          "PhoenixFury",
          "SteelStorm",
          "BlazingBlade",
          "StormChaser",
          "Frostbite",
          "Nightmare",
          "CrimsonTide",
          "SilentShadow",
          "VengefulViper",
          "SolarFlare",
          "SkyDancer",
          "RogueWraith",
          "LethalLynx",
          "FrostFang",
          "ScarletStrider",
          "RagingRaptor",
          "ShadowWisp",
          "VenomStrike",
          "FireFury",
          "BlazingSun",
          "ShadowStrike",
          "SteelGuardian",
          "WickedWitch",
          "RuthlessRaptor",
          "FrostyFox",
          "ViperVenom",
          "CrimsonReaper",
          "PhantomGhost",
          "StormStrider",
          "StormBreaker",
          "SapphireSword",
          "ShadowReign",
          "DragonSlayer",
          "SilverShadow",
          "EagleEye",
          "BlazingStorm",
          "MidnightSage",
          "RapidBlaze",
          "FrostFire",
          "ScarletWitch",
          "RagingTiger",
          "SpectralRogue",
          "BlazingRaptor",
          "EternalShadow",
          "WickedStrider",
          "FrostFire",
          "CrimsonStorm",
          "RuthlessReaper",
          "VenomousViper",
          "FrostFury",
          "ShadowBlade",
          "RapidPhantom",
          "ViperStrike",
          "EternalBlaze",
          "Vengeance",
          "LunarShadow",
          "Deathstrike",
          "AzureBlade",
          "RavenHeart",
          "SerpentFury",
          "CrimsonRogue",
          "VoidSeeker",
          "AstralSword",
          "FrozenFlame",
          "TwilightWarden",
          "ShadowPhoenix",
          "PhantomStrider",
          "VengefulViper",
          "EternalFire",
          "NebulaBlade",
          "SilverHawk",
          "SolarSword",
          "EclipseShadow",
          "StarBlade",
          "LethalWraith",
          "RadiantBlaze",
          "FrostGuardian",
          "MysticSerpent",
          "InfernoStorm",
          "Vengeance",
          "LunarShadow",
          "Deathstrike",
          "AzureBlade",
          "RavenHeart",
          "SerpentFury",
          "CrimsonRogue",
          "VoidSeeker",
          "AstralSword",
          "FrozenFlame",
          "TwilightWarden",
          "ShadowPhoenix",
          "PhantomStrider",
          "VengefulViper",
          "EternalFire",
          "NebulaBlade",
          "SilverHawk",
          "SolarSword",
          "EclipseShadow",
          "StarBlade",
          "LethalWraith",
          "RadiantBlaze",
          "FrostGuardian",
          "MysticSerpent",
          "InfernoStorm",
          "Vengeance",
          "LunarShadow",
          "Deathstrike",
          "AzureBlade",
          "RavenHeart",
          "SerpentFury",
          "CrimsonRogue",
          "VoidSeeker",
          "AstralSword",
          "FrozenFlame",
          "TwilightWarden",
          "ShadowPhoenix",
          "PhantomStrider",
          "VengefulViper",
          "EternalFire",
          "NebulaBlade",
          "SilverHawk",
          "SolarSword",
          "EclipseShadow",
          "StarBlade",
          "LethalWraith",
          "RadiantBlaze",
          "FrostGuardian",
          "MysticSerpent",
          "InfernoStorm",
          "BlazeRanger",
          "RagingFire",
          "ShadowDancer",
          "PhoenixWings",
          "IceStorm",
          "MoonlitSorcerer",
          "DarkReaper",
          "CosmicGhost",
          "StormRider",
          "FlareRogue",
          "RadiantBlade",
          "TempestPhantom",
          "SapphireViper",
          "EternalFlame",
          "StarlightBlade",
          "LunarShadow",
          "CrimsonRider",
          "BlazingSorcerer",
          "FrozenFlare",
          "AbyssGuardian",
          "SpectralPhantom"
         ],
         "xaxis": "x",
         "y": [
          250,
          312,
          186,
          409,
          143,
          288,
          201,
          178,
          332,
          194,
          210,
          288,
          176,
          313,
          257,
          197,
          288,
          224,
          193,
          212,
          250,
          195,
          267,
          223,
          204,
          256,
          271,
          198,
          223,
          268,
          210,
          288,
          176,
          313,
          257,
          197,
          288,
          224,
          193,
          212,
          250,
          195,
          267,
          223,
          204,
          256,
          271,
          198,
          223,
          268,
          210,
          288,
          176,
          313,
          257,
          197,
          288,
          224,
          193,
          212,
          250,
          195,
          267,
          223,
          204,
          256,
          271,
          198,
          223,
          268,
          210,
          288,
          176,
          313,
          257,
          197,
          288,
          224,
          193,
          212,
          250,
          195,
          267,
          223,
          204,
          256,
          271,
          198,
          223,
          268,
          263,
          215,
          289,
          176,
          336,
          197,
          221,
          278,
          185,
          257,
          213,
          238,
          241,
          229,
          218,
          226,
          193,
          247,
          202,
          211,
          254,
          288,
          245,
          296,
          209,
          232,
          191,
          226,
          198,
          246,
          216,
          267,
          285,
          202,
          226,
          213,
          239,
          242,
          227,
          219,
          223,
          195,
          248,
          203,
          212,
          253,
          287,
          286,
          203,
          213,
          238,
          194,
          248,
          205,
          214,
          252,
          288,
          283,
          207,
          211,
          213,
          239,
          242,
          227,
          219,
          223,
          195,
          248,
          203,
          212,
          253,
          287,
          286,
          203,
          213,
          238,
          194,
          248,
          205,
          214,
          252,
          288,
          283,
          207,
          211,
          213,
          239,
          242,
          227,
          219,
          223,
          195,
          248,
          203,
          212,
          253,
          287,
          286,
          203,
          213,
          238,
          194,
          248,
          205,
          214,
          252,
          288,
          283,
          207,
          211,
          225,
          239,
          242,
          226,
          218,
          221,
          197,
          239,
          206,
          215,
          263,
          295,
          210,
          223,
          248,
          267,
          294,
          203,
          206,
          220,
          225
         ],
         "yaxis": "y"
        }
       ],
       "layout": {
        "barmode": "relative",
        "legend": {
         "tracegroupgap": 0
        },
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Top 10 Players by Matches Played"
        },
        "xaxis": {
         "anchor": "y",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Player_Name"
         }
        },
        "yaxis": {
         "anchor": "x",
         "domain": [
          0,
          1
         ],
         "title": {
          "text": "Matches_Played"
         }
        }
       }
      },
      "text/html": [
       "<div>                            <div id=\"0167fc26-9ede-4dee-913a-3c2670f1dd67\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"0167fc26-9ede-4dee-913a-3c2670f1dd67\")) {                    Plotly.newPlot(                        \"0167fc26-9ede-4dee-913a-3c2670f1dd67\",                        [{\"alignmentgroup\":\"True\",\"hovertemplate\":\"Player_Name=%{x}<br>Matches_Played=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"pattern\":{\"shape\":\"\"}},\"name\":\"\",\"offsetgroup\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"textposition\":\"auto\",\"x\":[\"StealthMaster\",\"SniperLion\",\"NinjaGamer\",\"ThunderStrike\",\"SpeedDemon\",\"BlazeFury\",\"RapidShadow\",\"Frostbite\",\"SavageQueen\",\"SwiftStriker\",\"VenomousViper\",\"PhoenixFury\",\"SteelStorm\",\"BlazingBlade\",\"StormChaser\",\"Frostbite\",\"Nightmare\",\"CrimsonTide\",\"SilentShadow\",\"VengefulViper\",\"SolarFlare\",\"SkyDancer\",\"RogueWraith\",\"LethalLynx\",\"FrostFang\",\"ScarletStrider\",\"RagingRaptor\",\"ShadowWisp\",\"VenomStrike\",\"FireFury\",\"VenomousViper\",\"PhoenixFury\",\"SteelStorm\",\"BlazingBlade\",\"StormChaser\",\"Frostbite\",\"Nightmare\",\"CrimsonTide\",\"SilentShadow\",\"VengefulViper\",\"SolarFlare\",\"SkyDancer\",\"RogueWraith\",\"LethalLynx\",\"FrostFang\",\"ScarletStrider\",\"RagingRaptor\",\"ShadowWisp\",\"VenomStrike\",\"FireFury\",\"VenomousViper\",\"PhoenixFury\",\"SteelStorm\",\"BlazingBlade\",\"StormChaser\",\"Frostbite\",\"Nightmare\",\"CrimsonTide\",\"SilentShadow\",\"VengefulViper\",\"SolarFlare\",\"SkyDancer\",\"RogueWraith\",\"LethalLynx\",\"FrostFang\",\"ScarletStrider\",\"RagingRaptor\",\"ShadowWisp\",\"VenomStrike\",\"FireFury\",\"VenomousViper\",\"PhoenixFury\",\"SteelStorm\",\"BlazingBlade\",\"StormChaser\",\"Frostbite\",\"Nightmare\",\"CrimsonTide\",\"SilentShadow\",\"VengefulViper\",\"SolarFlare\",\"SkyDancer\",\"RogueWraith\",\"LethalLynx\",\"FrostFang\",\"ScarletStrider\",\"RagingRaptor\",\"ShadowWisp\",\"VenomStrike\",\"FireFury\",\"BlazingSun\",\"ShadowStrike\",\"SteelGuardian\",\"WickedWitch\",\"RuthlessRaptor\",\"FrostyFox\",\"ViperVenom\",\"CrimsonReaper\",\"PhantomGhost\",\"StormStrider\",\"StormBreaker\",\"SapphireSword\",\"ShadowReign\",\"DragonSlayer\",\"SilverShadow\",\"EagleEye\",\"BlazingStorm\",\"MidnightSage\",\"RapidBlaze\",\"FrostFire\",\"ScarletWitch\",\"RagingTiger\",\"SpectralRogue\",\"BlazingRaptor\",\"EternalShadow\",\"WickedStrider\",\"FrostFire\",\"CrimsonStorm\",\"RuthlessReaper\",\"VenomousViper\",\"FrostFury\",\"ShadowBlade\",\"RapidPhantom\",\"ViperStrike\",\"EternalBlaze\",\"Vengeance\",\"LunarShadow\",\"Deathstrike\",\"AzureBlade\",\"RavenHeart\",\"SerpentFury\",\"CrimsonRogue\",\"VoidSeeker\",\"AstralSword\",\"FrozenFlame\",\"TwilightWarden\",\"ShadowPhoenix\",\"PhantomStrider\",\"VengefulViper\",\"EternalFire\",\"NebulaBlade\",\"SilverHawk\",\"SolarSword\",\"EclipseShadow\",\"StarBlade\",\"LethalWraith\",\"RadiantBlaze\",\"FrostGuardian\",\"MysticSerpent\",\"InfernoStorm\",\"Vengeance\",\"LunarShadow\",\"Deathstrike\",\"AzureBlade\",\"RavenHeart\",\"SerpentFury\",\"CrimsonRogue\",\"VoidSeeker\",\"AstralSword\",\"FrozenFlame\",\"TwilightWarden\",\"ShadowPhoenix\",\"PhantomStrider\",\"VengefulViper\",\"EternalFire\",\"NebulaBlade\",\"SilverHawk\",\"SolarSword\",\"EclipseShadow\",\"StarBlade\",\"LethalWraith\",\"RadiantBlaze\",\"FrostGuardian\",\"MysticSerpent\",\"InfernoStorm\",\"Vengeance\",\"LunarShadow\",\"Deathstrike\",\"AzureBlade\",\"RavenHeart\",\"SerpentFury\",\"CrimsonRogue\",\"VoidSeeker\",\"AstralSword\",\"FrozenFlame\",\"TwilightWarden\",\"ShadowPhoenix\",\"PhantomStrider\",\"VengefulViper\",\"EternalFire\",\"NebulaBlade\",\"SilverHawk\",\"SolarSword\",\"EclipseShadow\",\"StarBlade\",\"LethalWraith\",\"RadiantBlaze\",\"FrostGuardian\",\"MysticSerpent\",\"InfernoStorm\",\"BlazeRanger\",\"RagingFire\",\"ShadowDancer\",\"PhoenixWings\",\"IceStorm\",\"MoonlitSorcerer\",\"DarkReaper\",\"CosmicGhost\",\"StormRider\",\"FlareRogue\",\"RadiantBlade\",\"TempestPhantom\",\"SapphireViper\",\"EternalFlame\",\"StarlightBlade\",\"LunarShadow\",\"CrimsonRider\",\"BlazingSorcerer\",\"FrozenFlare\",\"AbyssGuardian\",\"SpectralPhantom\"],\"xaxis\":\"x\",\"y\":[250,312,186,409,143,288,201,178,332,194,210,288,176,313,257,197,288,224,193,212,250,195,267,223,204,256,271,198,223,268,210,288,176,313,257,197,288,224,193,212,250,195,267,223,204,256,271,198,223,268,210,288,176,313,257,197,288,224,193,212,250,195,267,223,204,256,271,198,223,268,210,288,176,313,257,197,288,224,193,212,250,195,267,223,204,256,271,198,223,268,263,215,289,176,336,197,221,278,185,257,213,238,241,229,218,226,193,247,202,211,254,288,245,296,209,232,191,226,198,246,216,267,285,202,226,213,239,242,227,219,223,195,248,203,212,253,287,286,203,213,238,194,248,205,214,252,288,283,207,211,213,239,242,227,219,223,195,248,203,212,253,287,286,203,213,238,194,248,205,214,252,288,283,207,211,213,239,242,227,219,223,195,248,203,212,253,287,286,203,213,238,194,248,205,214,252,288,283,207,211,225,239,242,226,218,221,197,239,206,215,263,295,210,223,248,267,294,203,206,220,225],\"yaxis\":\"y\",\"type\":\"bar\"}],                        {\"template\":{\"data\":{\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Player_Name\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Matches_Played\"}},\"legend\":{\"tracegroupgap\":0},\"title\":{\"text\":\"Top 10 Players by Matches Played\"},\"barmode\":\"relative\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('0167fc26-9ede-4dee-913a-3c2670f1dd67');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "bar_top_10_players = px.bar(df, x=\"Player_Name\", y=\"Matches_Played\", title=\"Top 10 Players by Matches Played\")\n",
    "bar_top_10_players.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "4fe1ed8a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort the DataFrame by \"Matches Played\" in descending order\n",
    "df = df.sort_values(by=\"Matches_Played\", ascending=False)\n",
    "\n",
    "# Select the top 5 players with the highest matches played\n",
    "top_5_players = df.head(5)\n",
    "\n",
    "# Create a bar plot for the top 5 players\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(top_5_players[\"Player_Name\"], top_5_players[\"Matches_Played\"])\n",
    "plt.xlabel(\"Player_Name\")\n",
    "plt.ylabel(\"Matches_Played\")\n",
    "plt.title(\"Top 5 Players by Matches Played\")\n",
    "plt.xticks(rotation=45)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cf7369c3",
   "metadata": {},
   "source": [
    "# Top 5 players By Kills"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "30abb23b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort the DataFrame by \"Kills\" in descending order\n",
    "df = df.sort_values(by=\"Kills\", ascending=False)\n",
    "\n",
    "# Select the top 5 players with the highest matches played\n",
    "top_5_players = df.head(5)\n",
    "\n",
    "# Create a bar plot for the top 5 players\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(top_5_players[\"Player_Name\"], top_5_players[\"Kills\"])\n",
    "plt.xlabel(\"Player_Name\")\n",
    "plt.ylabel(\"Kills\")\n",
    "plt.title(\"Top 5 Players by Kills\")\n",
    "plt.xticks(rotation=45)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4586fe02",
   "metadata": {},
   "source": [
    "# Top 5 players By Wins"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "94ba311a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([0, 1, 2, 3],\n",
       " [Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, ''), Text(0, 0, '')])"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort the DataFrame by \"Wins\" in descending order\n",
    "df = df.sort_values(by=\"Wins\", ascending=False)\n",
    "\n",
    "# Select the top 5 players with the highest matches played\n",
    "top_5_players = df.head(5)\n",
    "\n",
    "# Create a bar plot for the top 5 players\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(top_5_players[\"Player_Name\"], top_5_players[\"Wins\"])\n",
    "plt.xlabel(\"Player_Name\")\n",
    "plt.ylabel(\"Wins\")\n",
    "plt.title(\"Top 5 Players by Wins\")\n",
    "plt.xticks(rotation=45)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "32566b43",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sort the DataFrame by \"Matches Played\" in descending order\n",
    "df = df.sort_values(by=\"Player_Name\", ascending=False)\n",
    "\n",
    "# Select the top 5 players with the highest matches played\n",
    "top_5_players = df.head(5)\n",
    "plt.figure(figsize=(8, 6))\n",
    "plt.bar(top_5_players[\"Player_Name\"], top_5_players[\"Rank\"])\n",
    "plt.xlabel('Player_Name')\n",
    "plt.ylabel('Rank')\n",
    "plt.title('Player_Name by Rank')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "320791f5",
   "metadata": {},
   "source": [
    "# How many times Rank are Published"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "656cc706",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "rank_counts = df[\"Rank\"].value_counts().reset_index()\n",
    "rank_counts.columns = [\"Rank\", \"Count\"]\n",
    "rank_counts = rank_counts.sort_values(by=\"Count\", ascending=False)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.bar(rank_counts[\"Rank\"], rank_counts[\"Count\"])\n",
    "plt.xlabel(\"Rank\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Rank Distribution Among Players\")\n",
    "plt.xticks(rotation=45)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b463a82",
   "metadata": {},
   "source": [
    "# How many Times Rank Published by Player Name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "bf3fdb78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Create a cross-tabulation to count how many times each rank was achieved by each player\n",
    "cross_tab = pd.crosstab(df[\"Player_Name\"], df[\"Rank\"]).head(20)\n",
    "\n",
    "# Plot the bar chart\n",
    "cross_tab.plot(kind=\"bar\", stacked=True, figsize=(15, 8))\n",
    "\n",
    "# Customize the plot\n",
    "plt.xlabel(\"Player Name\")\n",
    "plt.ylabel(\"Count\")\n",
    "plt.title(\"Rank Achievements by Player\")\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fa1a979b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
